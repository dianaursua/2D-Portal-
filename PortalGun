using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PortalGun : MonoBehaviour
{
    Camera cam;
    public Transform pivot;

    public GameObject bluePortal;
    public GameObject orangePortal;

    public float maxRayDistance = 10f;
    public float pickUpDistance = 5f;
    public float dropDistance = 5f;
    public LayerMask ignoreLayers;
    public LayerMask pickableLayer;

    private GameObject pickedObject;
    private Collider2D pickedObjectCollider;
    public KeyCode pickUpKey = KeyCode.F;

    void Start()
    {
        cam = Camera.main;

        // Set up the ignore layer mask to ignore the "Portal" layer
        ignoreLayers = LayerMask.GetMask("Portal");
        ignoreLayers = ~ignoreLayers; // Invert the mask to ignore specified layers
    }

    void Update()
    {
        HandleGunRotation();
        HandlePortals();
        HandleObjectInteraction();
    }

    void HandleGunRotation()
    {
        Vector3 mousePos = Input.mousePosition;
        Vector3 screenPoint = cam.WorldToScreenPoint(transform.position);

        Vector3 offset = new Vector2(mousePos.x - screenPoint.x, mousePos.y - screenPoint.y);
        float angle = Mathf.Atan2(offset.y, offset.x) * Mathf.Rad2Deg;
        pivot.rotation = Quaternion.Euler(0, 0, angle);
    }

    void HandlePortals()
    {
        Vector3 worldMousePos = cam.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, cam.nearClipPlane));
        Vector2 direction = (worldMousePos - transform.position).normalized;

        RaycastHit2D hit = Physics2D.Raycast(transform.position, direction, maxRayDistance, ignoreLayers);

        Vector2 targetPosition;
        if (hit.collider != null)
        {
            targetPosition = hit.point;
            Debug.DrawRay(transform.position, direction * hit.distance, Color.white);
        }
        else
        {
            targetPosition = (Vector2)transform.position + direction * maxRayDistance;
            Debug.DrawRay(transform.position, direction * maxRayDistance, Color.red);
        }

        if (Input.GetMouseButtonDown(0))
        {
            bluePortal.transform.position = new Vector3(targetPosition.x, targetPosition.y, bluePortal.transform.position.z);
            Debug.Log("Moved BluePortal to " + targetPosition);
        }

        if (Input.GetMouseButtonDown(1))
        {
            orangePortal.transform.position = new Vector3(targetPosition.x, targetPosition.y, orangePortal.transform.position.z);
            Debug.Log("Moved OrangePortal to " + targetPosition);
        }
    }

    void HandleObjectInteraction()
    {
        Vector3 worldMousePos = cam.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, cam.nearClipPlane));
        Vector2 direction = (worldMousePos - transform.position).normalized;

        if (Input.GetKeyDown(pickUpKey))
        {
            if (pickedObject == null)
            {
                RaycastHit2D pickUpHit = Physics2D.Raycast(transform.position, direction, pickUpDistance, pickableLayer);
                if (pickUpHit.collider != null)
                {
                    pickedObject = pickUpHit.collider.gameObject;
                    pickedObjectCollider = pickedObject.GetComponent<Collider2D>();
                    if (pickedObjectCollider != null)
                    {
                        pickedObjectCollider.enabled = false;
                    }
                    Debug.Log("Picked up " + pickedObject.name);
                }
            }
            else
            {
                Vector2 targetPosition = (Vector2)transform.position + direction * dropDistance;

                pickedObject.transform.position = new Vector3(targetPosition.x, targetPosition.y, pickedObject.transform.position.z);
                if (pickedObjectCollider != null)
                {
                    pickedObjectCollider.enabled = true;
                }
                Debug.Log("Placed " + pickedObject.name + " at " + targetPosition);
                pickedObject = null;
                pickedObjectCollider = null;
            }
        }

        if (pickedObject != null)
        {
            Vector3 newMousePos = cam.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, cam.WorldToScreenPoint(pickedObject.transform.position).z));
            pickedObject.transform.position = new Vector3(newMousePos.x, newMousePos.y, pickedObject.transform.position.z);
        }
    }
}
